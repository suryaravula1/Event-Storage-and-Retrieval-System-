
# Stage 1: Build the Go app
FROM arm64v8/golang:alpine AS builder

# Install dependencies
RUN apk update && apk add --no-cache git
RUN apk --no-cache add git gcc libc-dev musl-dev
# Set the working directory inside the container
WORKDIR /app


# Copy the go.mod and go.sum files first, and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the application source code to the working directory
COPY . .

# Build the Go application as a statically linked binary
ENV CGO_ENABLED 1
# ENV GOFLAGS -mod=vendor
# ENV GOOS=linux
# ENV GOARCH=arm64

# ENV CC aarch64-linux-gnu-gcc
ENV GOOS linux 
ENV GOARCH arm64 
ENV CGO_ENABLED 1 
RUN  go build -v  -tags musl -o goapp .

# Stage 2: Run the Go app with minimal image
FROM arm64v8/alpine

# Set up necessary certificates (for HTTPS communication, if required)
RUN apk add --no-cache ca-certificates

# Set the working directory in the second stage
WORKDIR /root/

# Copy the compiled Go binary from the first stage
COPY --from=builder /app/goapp .

# Expose the port that the app will run on (e.g., 9000 if you're using Fiber)
EXPOSE 9000

# Run the Go application
CMD ["./goapp"]
